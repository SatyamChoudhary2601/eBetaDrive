{"ast":null,"code":"var _jsxFileName = \"H:\\\\new\\\\e beta react native\\\\eBetaDrive\\\\web-app\\\\src\\\\views\\\\CancellationReasons.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport MaterialTable from 'material-table';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CircularLoading from \"../components/CircularLoading\";\nimport { features, language } from 'config';\nimport { FirebaseContext } from 'common';\nexport default function CancellationReasons() {\n  _s();\n\n  const {\n    api\n  } = useContext(FirebaseContext);\n  const {\n    editCancellationReason\n  } = api;\n  const columns = [{\n    title: language.reason,\n    field: 'label',\n    render: rowData => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 66\n      }\n    }, rowData.label)\n  }];\n  const [data, setData] = useState([]);\n  const cancelreasondata = useSelector(state => state.cancelreasondata);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (cancelreasondata.complex) {\n      setData(cancelreasondata.complex);\n    } else {\n      setData([]);\n    }\n  }, [cancelreasondata.complex]);\n  return cancelreasondata.loading ? /*#__PURE__*/React.createElement(CircularLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 32\n    }\n  }) : /*#__PURE__*/React.createElement(MaterialTable, {\n    title: language.cancellation_reasons,\n    columns: columns,\n    data: data,\n    options: {\n      exportButton: true,\n      pageSize: 10\n    },\n    editable: features.AllowCriticalEditsAdmin ? {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const tblData = data;\n          newData.value = tblData.length;\n          tblData.push(newData);\n          dispatch(editCancellationReason(tblData, \"Add\"));\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const tblData = data;\n          tblData[tblData.indexOf(oldData)] = newData;\n          dispatch(editCancellationReason(tblData, \"Update\"));\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const tblData = data;\n          tblData.splice(tblData.indexOf(oldData), 1);\n\n          for (let i = 0; i < tblData.length; i++) {\n            tblData[i].value = i;\n          }\n\n          dispatch(editCancellationReason(tblData, \"Delete\"));\n        }, 600);\n      })\n    } : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  });\n}\n\n_s(CancellationReasons, \"2FpG9sC3zjPfjCZFtXPLd3SKbmI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = CancellationReasons;\n\nvar _c;\n\n$RefreshReg$(_c, \"CancellationReasons\");","map":{"version":3,"sources":["H:/new/e beta react native/eBetaDrive/web-app/src/views/CancellationReasons.js"],"names":["React","useState","useEffect","useContext","MaterialTable","useSelector","useDispatch","CircularLoading","features","language","FirebaseContext","CancellationReasons","api","editCancellationReason","columns","title","reason","field","render","rowData","label","data","setData","cancelreasondata","state","dispatch","complex","loading","cancellation_reasons","exportButton","pageSize","AllowCriticalEditsAdmin","onRowAdd","newData","Promise","resolve","setTimeout","tblData","value","length","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport MaterialTable from 'material-table';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CircularLoading from \"../components/CircularLoading\";\nimport { \n  features,\n  language\n} from 'config';\nimport { FirebaseContext } from 'common';\n\nexport default function CancellationReasons() {\n  const { api } = useContext(FirebaseContext);\n  const {\n    editCancellationReason\n  } = api;\n  const columns = [\n    { title: language.reason, field: 'label' ,render: rowData => <span>{rowData.label}</span>}\n  ];\n  \n  const [data, setData] = useState([]);\n  const cancelreasondata = useSelector(state => state.cancelreasondata);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (cancelreasondata.complex) {\n      setData(cancelreasondata.complex);\n    }else{\n      setData([]);\n    }\n  }, [cancelreasondata.complex]);\n\n  return (\n    cancelreasondata.loading ? <CircularLoading /> :\n      <MaterialTable\n        title={language.cancellation_reasons}\n        columns={columns}\n        data={data}\n        options={{\n          exportButton: true,\n          pageSize: 10\n        }}\n        editable={features.AllowCriticalEditsAdmin ? {\n            onRowAdd: newData =>\n            new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n                const tblData = data;\n                newData.value = tblData.length\n                tblData.push(newData);\n                dispatch(editCancellationReason(tblData, \"Add\"));\n              }, 600);\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n                const tblData = data;\n                tblData[tblData.indexOf(oldData)] = newData;\n                dispatch(editCancellationReason(tblData, \"Update\"));\n              }, 600);\n            }),\n          onRowDelete: oldData =>\n            new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n                const tblData = data;\n                tblData.splice(tblData.indexOf(oldData), 1);\n                for(let i=0;i<tblData.length;i++){\n                  tblData[i].value = i;\n                }\n                dispatch(editCancellationReason(tblData, \"Delete\"));\n              }, 600);\n            }),\n        } : null}\n      />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}