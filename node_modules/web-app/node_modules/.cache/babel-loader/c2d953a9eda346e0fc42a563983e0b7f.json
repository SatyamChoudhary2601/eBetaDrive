{"ast":null,"code":"var _jsxFileName = \"H:\\\\new\\\\e beta react native\\\\eBetaDrive\\\\web-app\\\\src\\\\components\\\\GoogleMapsAutoComplete.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { geocodeByPlaceId } from 'react-places-autocomplete';\nimport { language } from 'config';\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  }\n}));\nexport default function GoogleMapsAutoComplete(props) {\n  _s();\n\n  const classes = useStyles();\n  const [value, setValue] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const fetch = useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    style: props.style,\n    getOptionLabel: option => typeof option === 'string' ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: props.value,\n    onChange: (event, newValue) => {\n      setOptions(newValue ? [newValue, ...options] : options);\n      setValue(newValue);\n\n      if (newValue && newValue.place_id) {\n        geocodeByPlaceId(newValue.place_id).then(results => {\n          if (results.length > 0) {\n            newValue.coords = {\n              lat: results[0].geometry.location.lat(),\n              lng: results[0].geometry.location.lng()\n            };\n            newValue.placeDetails = results[0];\n          }\n\n          props.onChange(newValue);\n        }).catch(error => alert(language.google_places_error));\n      } else {\n        props.onChange(newValue);\n      }\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: props.placeholder,\n      variant: props.variant,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(LocationOnIcon, {\n        className: classes.icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }, parts.map((part, index) => /*#__PURE__*/React.createElement(\"span\", {\n        key: index,\n        style: {\n          fontWeight: part.highlight ? 700 : 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }, part.text)), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }\n      }, option.structured_formatting.secondary_text)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(GoogleMapsAutoComplete, \"MVlhvrqF+ix9OtYDFMFadfbN8uc=\", false, function () {\n  return [useStyles];\n});\n\n_c = GoogleMapsAutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMapsAutoComplete\");","map":{"version":3,"sources":["H:/new/e beta react native/eBetaDrive/web-app/src/components/GoogleMapsAutoComplete.js"],"names":["React","useState","useEffect","useMemo","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","geocodeByPlaceId","language","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","GoogleMapsAutoComplete","props","classes","value","setValue","inputValue","setInputValue","options","setOptions","fetch","request","callback","getPlacePredictions","active","window","google","maps","places","AutocompleteService","undefined","input","results","newOptions","style","option","description","x","event","newValue","place_id","then","length","coords","lat","geometry","location","lng","placeDetails","onChange","catch","error","alert","google_places_error","newInputValue","params","placeholder","variant","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useMemo} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport { geocodeByPlaceId } from 'react-places-autocomplete';\nimport { language } from 'config';\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function GoogleMapsAutoComplete(props) {\n  const classes = useStyles();\n  const [value, setValue] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState([]);\n\n  const fetch = useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    [],\n  );\n\n  useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      style={props.style}\n      getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={props.value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n        if (newValue && newValue.place_id) {\n          geocodeByPlaceId(newValue.place_id)\n            .then(results => {\n              if (results.length > 0) {\n                newValue.coords = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() }\n                newValue.placeDetails = results[0];\n              }\n              props.onChange(newValue);\n            })\n            .catch(error => alert(language.google_places_error));\n        } else {\n          props.onChange(newValue);\n        }\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={props.placeholder}\n          variant={props.variant}\n          fullWidth\n        />\n      )}\n      renderOption={(option) => {\n        const matches = option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length]),\n        );\n\n        return (\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <LocationOnIcon className={classes.icon} />\n            </Grid>\n            <Grid item xs>\n              {parts.map((part, index) => (\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                  {part.text}\n                </span>\n              ))}\n\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {option.structured_formatting.secondary_text}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }}\n    />\n  );\n}"]},"metadata":{},"sourceType":"module"}