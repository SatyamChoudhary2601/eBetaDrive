{"ast":null,"code":"var _jsxFileName = \"H:\\\\new\\\\e beta react native\\\\eBetaDrive\\\\web-app\\\\src\\\\views\\\\Notifications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport MaterialTable from 'material-table';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CircularLoading from \"../components/CircularLoading\";\nimport { features, language } from 'config';\nimport { FirebaseContext } from 'common';\nexport default function Notifications() {\n  _s();\n\n  const {\n    api\n  } = useContext(FirebaseContext);\n  const {\n    sendNotification,\n    editNotifications\n  } = api;\n  const columns = [{\n    title: language.device_type,\n    field: 'devicetype',\n    lookup: {\n      All: 'All',\n      ANDROID: 'Android',\n      IOS: 'iOS'\n    }\n  }, {\n    title: language.user_type,\n    field: 'usertype',\n    lookup: {\n      rider: language.rider,\n      driver: language.driver\n    }\n  }, {\n    title: language.title,\n    field: 'title'\n  }, {\n    title: language.body,\n    field: 'body'\n  }];\n  const [data, setData] = useState([]);\n  const notificationdata = useSelector(state => state.notificationdata);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (notificationdata.notifications) {\n      setData(notificationdata.notifications);\n    } else {\n      setData([]);\n    }\n  }, [notificationdata.notifications]);\n  return notificationdata.loading ? /*#__PURE__*/React.createElement(CircularLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 31\n    }\n  }) : /*#__PURE__*/React.createElement(MaterialTable, {\n    title: language.push_notification_title,\n    columns: columns,\n    data: data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          const tblData = data;\n          tblData.push(newData);\n          features.AllowCriticalEditsAdmin ? dispatch(sendNotification(newData)) : alert(language.demo_mode);\n          dispatch(editNotifications(newData, \"Add\"));\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          dispatch(editNotifications(newData, \"Update\"));\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          dispatch(editNotifications(oldData, \"Delete\"));\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(Notifications, \"IXKCPA4WD5C3NCcXhE+kTTM1c6M=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Notifications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"sources":["H:/new/e beta react native/eBetaDrive/web-app/src/views/Notifications.js"],"names":["React","useState","useEffect","useContext","MaterialTable","useSelector","useDispatch","CircularLoading","features","language","FirebaseContext","Notifications","api","sendNotification","editNotifications","columns","title","device_type","field","lookup","All","ANDROID","IOS","user_type","rider","driver","body","data","setData","notificationdata","state","dispatch","notifications","loading","push_notification_title","onRowAdd","newData","Promise","resolve","setTimeout","tblData","push","AllowCriticalEditsAdmin","alert","demo_mode","onRowUpdate","oldData","onRowDelete"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect, useContext } from 'react';\nimport MaterialTable from 'material-table';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CircularLoading from \"../components/CircularLoading\";\nimport { features, language } from 'config';\nimport { FirebaseContext } from 'common';\n\nexport default function Notifications() {\n  const { api } = useContext(FirebaseContext);\n  const {\n    sendNotification,\n    editNotifications\n  } = api;\n\n  const columns =  [\n      {\n        title: language.device_type,\n        field: 'devicetype',\n        lookup: { All: 'All', ANDROID: 'Android', IOS: 'iOS' },\n      },\n      {\n        title: language.user_type,\n        field: 'usertype',\n        lookup: { rider: language.rider, driver: language.driver },\n      },\n      { title: language.title,field: 'title'},\n      { title: language.body, field: 'body' },\n  ];\n\n  const [data, setData] = useState([]);\n  const notificationdata = useSelector(state => state.notificationdata);\n  const dispatch = useDispatch();\n\n  useEffect(()=>{\n      if(notificationdata.notifications){\n          setData(notificationdata.notifications);\n      }else{\n          setData([]);\n      }\n  },[notificationdata.notifications]);\n\n  return (\n    notificationdata.loading? <CircularLoading/>:\n    <MaterialTable\n      title={language.push_notification_title}\n      columns={columns}\n      data={data}\n      editable={{\n        onRowAdd: newData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              const tblData = data;\n              tblData.push(newData);\n              features.AllowCriticalEditsAdmin?\n                dispatch(sendNotification(newData))\n                :\n                alert(language.demo_mode);\n              dispatch(editNotifications(newData,\"Add\"));\n            }, 600);\n          }),\n\n          onRowUpdate: (newData, oldData) =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              dispatch(editNotifications(newData,\"Update\"));\n            }, 600);\n          }),\n        onRowDelete: oldData =>\n          new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              dispatch(editNotifications(oldData,\"Delete\"));\n            }, 600);\n          }),\n      }}\n    />\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}