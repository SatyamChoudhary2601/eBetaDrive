{"ast":null,"code":"var _jsxFileName = \"H:\\\\new\\\\e beta react native\\\\eBetaDrive\\\\web-app\\\\src\\\\components\\\\ConfirmationDialogRaw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useSelector } from \"react-redux\";\nimport { language } from 'config';\nexport default function ConfirmationDialogRaw(props) {\n  _s();\n\n  const {\n    onClose,\n    value: valueProp,\n    open,\n    ...other\n  } = props;\n  const [value, setValue] = useState(valueProp);\n  const radioGroupRef = useRef(null);\n  const options = useSelector(state => state.cancelreasondata.simple);\n  useEffect(() => {\n    if (!open) {\n      setValue(valueProp);\n    }\n  }, [valueProp, open]);\n\n  const handleEntering = () => {\n    if (radioGroupRef.current != null) {\n      radioGroupRef.current.focus();\n    }\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  const handleOk = () => {\n    onClose(value);\n  };\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, Object.assign({\n    disableBackdropClick: true,\n    disableEscapeKeyDown: true,\n    maxWidth: \"xs\",\n    onEntering: handleEntering,\n    \"aria-labelledby\": \"confirmation-dialog-title\",\n    open: open\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"confirmation-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, language.select_reason), /*#__PURE__*/React.createElement(DialogContent, {\n    dividers: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RadioGroup, {\n    ref: radioGroupRef,\n    \"aria-label\": \"ringtone\",\n    name: \"ringtone\",\n    value: value,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, options.map(option => /*#__PURE__*/React.createElement(FormControlLabel, {\n    value: option,\n    key: option,\n    control: /*#__PURE__*/React.createElement(Radio, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 68\n      }\n    }),\n    label: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    autoFocus: true,\n    onClick: handleCancel,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, language.cancel), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOk,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, language.ok)));\n}\n\n_s(ConfirmationDialogRaw, \"5mLTl1MU/xln+xCpepOK2xKDWU0=\", false, function () {\n  return [useSelector];\n});\n\n_c = ConfirmationDialogRaw;\nConfirmationDialogRaw.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmationDialogRaw\");","map":{"version":3,"sources":["H:/new/e beta react native/eBetaDrive/web-app/src/components/ConfirmationDialogRaw.js"],"names":["React","useState","useEffect","useRef","DialogTitle","DialogContent","DialogActions","Dialog","RadioGroup","Radio","PropTypes","Button","FormControlLabel","useSelector","language","ConfirmationDialogRaw","props","onClose","value","valueProp","open","other","setValue","radioGroupRef","options","state","cancelreasondata","simple","handleEntering","current","focus","handleCancel","handleOk","handleChange","event","target","select_reason","map","option","cancel","ok","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useSelector } from \"react-redux\";\nimport { language } from 'config';\n\nexport default function ConfirmationDialogRaw(props) {\n  const { onClose, value: valueProp, open, ...other } = props;\n  const [value, setValue] = useState(valueProp);\n  const radioGroupRef = useRef(null);\n  const options = useSelector(state => state.cancelreasondata.simple);\n\n  useEffect(() => {\n    if (!open) {\n      setValue(valueProp);\n    }\n  }, [valueProp, open]);\n\n  const handleEntering = () => {\n    if (radioGroupRef.current != null) {\n      radioGroupRef.current.focus();\n    }\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  const handleOk = () => {\n    onClose(value);\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <Dialog\n      disableBackdropClick\n      disableEscapeKeyDown\n      maxWidth=\"xs\"\n      onEntering={handleEntering}\n      aria-labelledby=\"confirmation-dialog-title\"\n      open={open}\n      {...other}\n    >\n      <DialogTitle id=\"confirmation-dialog-title\">{language.select_reason}</DialogTitle>\n      <DialogContent dividers>\n        <RadioGroup\n          ref={radioGroupRef}\n          aria-label=\"ringtone\"\n          name=\"ringtone\"\n          value={value}\n          onChange={handleChange}\n        >\n          {options.map((option) => (\n            <FormControlLabel value={option} key={option} control={<Radio />} label={option} />\n          ))}\n        </RadioGroup>\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel} color=\"primary\">\n          {language.cancel}\n        </Button>\n        <Button onClick={handleOk} color=\"primary\">\n          {language.ok}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nConfirmationDialogRaw.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};"]},"metadata":{},"sourceType":"module"}